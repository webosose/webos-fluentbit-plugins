#!/bin/bash

# Copyright (c) 2014-2018 LG Electronics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

source @WEBOS_INSTALL_DATADIR@/rdxd/logging.sh

if [ $# -ne 2 ]; then
        ErrPrint PARAM_ERROR SCRIPT=\"make_overview.sh\" "Invalid number of parameters ($#)."
        exit 1
fi

rdx_overview_file="$1"
sdx_header="$2"

serial_number=`nyx-cmd DeviceInfo query serial_number`
if [ -z "$serial_number" ]; then
        WarnPrint SERIAL_NUM_ERR "Serial number not available."
        serial_number="<unknown>"
else
        DbgPrint "Serial number is '$serial_number'"
fi

product_number=`nyx-cmd DeviceInfo query product_id`
if [ -z "$product_number" ]; then
        WarnPrint PRODUCT_ID_ERR "Product id not available."
        product_number="<unknown>"
else
        DbgPrint "Product number is '$product_number'"

fi

hw_rev=`nyx-cmd DeviceInfo query hardware_revision`
if [ -z "$hw_rev" ]; then
        WarnPrint HW_REVISION_ERR "Hardware revision not available."
        hw_rev="<unknown>"
else
        DbgPrint "Hardware revision is '$hw_rev'"
fi

# TODO: Replace with nyx-cmd DeviceInfo query when MEID support is added to Nyx
#phone_meid=`lunaprop -m -n com.palm.rdxd MEID 2>/dev/null`
#if [ -z "$phone_meid" ]; then
#	ErrPrint "MEID not available."
#	phone_meid="<n/a>"
#else
#	DbgPrint "phone meid = '$phone_meid'"
#fi

# TODO: Replace with nyx-cmd DeviceInfo query when IMEI support is added to Nyx
#phone_imei=`lunaprop -m -n com.palm.rdxd IMEI 2>/dev/null`
#if [ -z "$phone_imei" ]; then
#	ErrPrint "MEID not available."
#	phone_imei="<n/a>"
#else
#	DbgPrint "phone imei = '$phone_imei'"
#fi

# TV-s currently don't have a modems, so we won't be creating a Nyx modem device type until they do;
# perhaps the webOS Ports community will for the phones it's working on.
# TODO: Replace with nyx-cmd call to get modem firmware version when modem support is added to Nyx
#modem_fw_version=`@WEBOS_INSTALL_SBINDIR@/get_fw_version`

# get nduid from nyx call
nova_device_uid=`nyx-cmd DeviceInfo query nduid`
if [ -z "$nova_device_uid" ]; then
        WarnPrint DEVICE_UID_ERR "Device UID not available."
        nova_device_uid="<unknown>"
else
        DbgPrint "Device UID is '$nova_device_uid'"
fi

# get device name from nyx call
nova_device_name=`nyx-cmd DeviceInfo query device_name`
if [ -z "$nova_device_name" ]; then
        WarnPrint DEVICE_NAME_ERR "Device Name not available."
        nova_device_name="<unknown>"
else
        DbgPrint "Device Name is '$nova_device_name'"
fi

# create the overview file
DbgPrint "Creating overview file $rdx_overview_file"

echo -e "# Sumologic Overview" > $rdx_overview_file
echo -e ""  >> $rdx_overview_file
echo -e "SERIAL_SNUM=$serial_number"  >> $rdx_overview_file
echo -e "PRODUCT_NUM=$product_number"  >> $rdx_overview_file
echo -e "HARDWARE_REV=$hw_rev"  >> $rdx_overview_file
echo -e "DEVICE_UID=$nova_device_uid"  >> $rdx_overview_file
echo -e "DEVICE_NAME=$nova_device_name"  >> $rdx_overview_file
#TODO: Output MEID and IMEI in overview.txt file when Nyx device info type has support for it
#echo -e "PHONE_IMEI=$phone_imei"  >> $rdx_overview_file
#echo -e "PHONE_MEID=$phone_meid"  >> $rdx_overview_file
#TODO: Output modem_firmware_version in overview.txt file when Nyx modem device type is available
#echo -e "MODEM_FW_VERSION=$modem_fw_version" >> $rdx_overview_file

webos_build_id=`nyx-cmd OSInfo query webos_build_id`
if [ -z "$webos_build_id" ]; then
        WarnPrint BUILD_NUM_ERR "Build ID not available."
else
        echo -e "BUILD_ID=$webos_build_id" >> $rdx_overview_file
fi

webos_imagename=`nyx-cmd OSInfo query webos_imagename`
if [ -z "$webos_imagename" ]; then
        WarnPrint BUILD_NAME_ERR "Build name not available."
else
        echo -e "BUILD_NAME=$webos_imagename" >> $rdx_overview_file
fi

webos_release=`nyx-cmd OSInfo query webos_release`
if [ -z "$webos_release" ]; then
        WarnPrint RELEASE_NUM_ERR "Release number not available."
else
        echo -e "RELEASE_NUMBER=$webos_release" >> $rdx_overview_file
fi

echo "" >> $rdx_overview_file

if [ -z "$sdx_header" ]; then
        WarnPrint "sdx header not available."
else
        echo -e "$sdx_header" >> $rdx_overview_file
fi

echo "" >> $rdx_overview_file

# cat's out the given set of files
for f in "/proc/cpuinfo" "/sys/class/mmc_host/mmc0/mmc0:0001/manfid" "/sys/class/mmc_host/mmc0/mmc0:0001/oemid" "/sys/class/mmc_host/mmc0/mmc0:0001/serial" "/proc/mounts"; do
	echo "$ cat $f" >> $rdx_overview_file
	cat "$f" >> $rdx_overview_file

done

# executes the given set of commands
for c in "uptime" "df -h" "ps aux" "date -R" "ls -l @WEBOS_INSTALL_SYSMGR_LOCALSTATEDIR@/preferences"; do
	echo "$ $c" >> $rdx_overview_file
	$c >> $rdx_overview_file
done
